# Generated by Django 2.2.3 on 2019-09-02 17:42

from django.db import migrations

from core.fetchers.services import get_all_download_sources
from core.model.audiovisual import DownloadSourceResult, AudiovisualRecord
from core.model.searches import Search, Condition


def execute(apps, schema_editor):
    audiovisual_records = (
        Search.Builder
        .new_search(AudiovisualRecord)
        .add_condition(Condition('deleted', Condition.EQUALS, False))
        .add_condition(Condition('has_downloads', Condition.EQUALS, True))
        .search()
    )
    source_classes = [sc for sc in get_all_download_sources() if sc.enabled]
    total = len(audiovisual_records) * len(source_classes)
    n = 0
    for audiovisual_record in audiovisual_records:
        modified = False
        all_downloads = (
            Search.Builder
            .new_search(DownloadSourceResult)
            .add_condition(Condition('deleted', Condition.EQUALS, False))
            .add_condition(Condition('audiovisual_record', Condition.EQUALS, audiovisual_record))
            .search()
        )
        for source_class in source_classes:
            results = [d for d in all_downloads if d.source_name == source_class.source_name]
            n += 1
            if len(results) == 3:
                print(f'[{n}/{total}] {audiovisual_record.name} / {audiovisual_record.id} / '
                      f'{source_class.source_name} needs to be checked')
                try:
                    del audiovisual_record.metadata['downloads_fetch'][source_class.source_name]
                    modified = True
                except KeyError:
                    pass
        try:
            del audiovisual_record.metadata['recheck_downloads']
            modified = True
        except KeyError:
            pass
        if modified:
            audiovisual_record.save()


class Migration(migrations.Migration):

    dependencies = [
        ('web', '0008_auto_20190902_1523'),
    ]

    operations = [
        migrations.RunPython(execute)
    ]
